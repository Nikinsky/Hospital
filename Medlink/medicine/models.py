from django.contrib.auth.models import AbstractUserfrom django.db import modelsfrom phonenumber_field.modelfields import PhoneNumberFieldfrom multiselectfield import MultiSelectFieldfrom django.core.validators import MaxValueValidator, MinValueValidatorGENDER = (        ('MALE', 'MALE'),        ('FEMALE', 'FEMALE'),        ('OTHER', 'OTHER'),    )class UserProfile(AbstractUser):    phone_number = PhoneNumberField(region='KG', null=True, blank=True)    address = models.CharField(max_length=64, null=True, blank=True)    picture = models.ImageField(upload_to='photos_user', null=True, blank=True)    gender = models.CharField(max_length=32, choices=GENDER, default='MALE')    USER_ROLE = (        ('doctor', 'doctor'),        ('patient','patient'),    )    user_role = models.CharField(max_length=8, choices=USER_ROLE, default='patient')class SpecialtyDoctor(models.Model):    speciality = models.CharField(max_length=100, help_text="Специальность врача")    def __str__(self):        return f'{self.speciality}'class DepartmentDoctor(models.Model):    department = models.CharField(max_length=100, help_text="Отделение врача")    def __str__(self):        return f'{self.department}'class Doctor(UserProfile):    speciality = models.ForeignKey(SpecialtyDoctor, related_name='doctors', on_delete=models.CASCADE)    department = models.ForeignKey(DepartmentDoctor, related_name='doctors', on_delete=models.CASCADE)    shift_start = models.TimeField(null=True, blank=True)    shift_end = models.TimeField(null=True, blank=True)    DAYS_OF_WEEK = [        ('Mon', 'Monday'),        ('Tue', 'Tuesday'),        ('Wed', 'Wednesday'),        ('Thu', 'Thursday'),        ('Fri', 'Friday'),        ('Sat', 'Saturday'),        ('San', 'Sunday'),    ]    working_days = MultiSelectField(choices=DAYS_OF_WEEK, max_length=100, max_choices=7,null=True, blank=True)  # Allow selecting 3 days = max_choices=3    EDU_CHOICES = (        ('Высшее образование', 'Высшее образование'),        ('Кандидат мединциских наук', 'Кандидат мединциских наук'),        ('Доктор мединциских наук', 'Доктор мединциских наук')    )    status_edu = models.CharField(max_length=255, choices=EDU_CHOICES,null=True, blank=True )    price = models.PositiveIntegerField(default=0,null=True, blank=True)    class Meta:        verbose_name = "Doctor"        verbose_name_plural = "User_Doctor"    def __str__(self):        return f'{self.username}-{self.last_name}'class Education(models.Model):    specialist_educations = models.ForeignKey(Doctor, related_name='educations', on_delete=models.CASCADE)    start_edu = models.DateField()    end_edu = models.DateField()    description_study = models.TextField()    def __str__(self):        return f'{self.specialist_educations} - {self.start_edu} - {self.end_edu}'class Experience(models.Model):    specialist_experience = models.ForeignKey(Doctor, related_name='experiences', on_delete=models.CASCADE)    start_exper = models.DateField()    end_exper = models.DateField()    description_exper = models.TextField()    def __str__(self):        return f'{self.specialist_experience} - {self.start_exper} - {self.end_exper}'class PatientProfile(UserProfile):    emergency_contact = PhoneNumberField(blank=True, null=True)    birthday= models.DateField()    allergy = models.TextField(null=True,blank=True)    BLOOD_TYPE = (        ('1','1'),        ('2','2'),        ('3','3'),        ('4','4'),    )    blood_type = models.CharField(max_length=1, choices=BLOOD_TYPE, default=1,null=True,blank=True)    class Meta:        verbose_name = "Patient"        verbose_name_plural = "User_Patient"    def __str__(self):        return f'{self.username}'class Appointment(models.Model): #Прием    patient = models.ForeignKey(UserProfile, related_name='patients_a', on_delete=models.CASCADE)    doctor = models.ManyToManyField(UserProfile, related_name='doctors_a')    date_time = models.DateTimeField(auto_now_add=True)    STATUS_APPOINTMENT = (        ('planned', 'planned'),        ('completed', 'completed'),        ('cancelled', 'cancelled'),    )    status = models.CharField(max_length=32, choices=STATUS_APPOINTMENT, default='planned')    notes = models.TextField()    def __str__(self):        return f'{self.patient} - {self.status} - {self.doctor}'class MedicalRecord(models.Model):    patient = models.ForeignKey(UserProfile, related_name='patient_records', on_delete=models.CASCADE)    doctor = models.ManyToManyField(UserProfile, related_name='doctors_records')    created_at = models.DateTimeField(auto_now_add=True)    def __str__(self):        return f'MedicalRecord: {self.patient}'class Prescribed_Medication(models.Model): # Назначенные лекарства    record = models.ForeignKey(MedicalRecord, related_name='medications', on_delete=models.CASCADE)    diagnosis = models.TextField(null=True,blank=True)    treatment = models.TextField(null=True,blank=True)    prescribed_medication = models.CharField(max_length=100)    created_at = models.DateTimeField(auto_now_add=True)class Feedback(models.Model):    doctor = models.ForeignKey(UserProfile, related_name='feedbacks_d', on_delete=models.CASCADE)    patient = models.ForeignKey(UserProfile, related_name='feedbacks_p', on_delete=models.CASCADE)    rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])    # rating = models.IntegerField(choices=[(i, str(i)) for i in range(1, 6)])    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)    comment = models.TextField()    def __str__(self):        return f'{self.doctor} - {self.rating} - {self.patient}'class FeedbackLike(models.Model):    patient = models.ForeignKey(PatientProfile, related_name='patients', on_delete=models.CASCADE)    feedbacks = models.ForeignKey(Feedback, related_name='feedback_lakes', on_delete=models.CASCADE)    like = models.BooleanField(default=False, null=True, blank=True)    created_at = models.DateTimeField(auto_now_add=True)    class Meta:        unique_together = ('patient', 'like')    def __str__(self):        return f'{self.patient} - {self.feedbacks}'class Prescriptions(models.Model):    medication_name = models.CharField(max_length=55)    dosage = models.CharField(max_length=25)    created_at = models.DateTimeField(auto_now_add=True)    diagnosis = models.ForeignKey(MedicalRecord,on_delete=models.CASCADE,related_name='medical')    def __str__(self):        return f'{self.dosage} - {self.medication_name}'class Billings(models.Model):    patient = models.ForeignKey(PatientProfile, on_delete=models.CASCADE,related_name='billings')    total_amount = models.PositiveIntegerField()    paid = models.BooleanField(default=False)    date = models.DateTimeField(auto_now_add=True)    doctor_id = models.ForeignKey(Doctor,on_delete=models.CASCADE,related_name='billings')    def __str__(self):        return f'{self.patient} - {self.total_amount} - {self.paid}'class Wards(models.Model):    name = models.CharField(max_length=100)    WARD_TYPE =(        ('VIP', 'VIP'),        ('STANDARD', 'STANDARD'),    )    ward_type = models.CharField(max_length=12, choices=WARD_TYPE, default='STANDARD')    capacity = models.PositiveIntegerField(default=5)    def __str__(self):        return f'{self.name} - {self.capacity}'class Warnings(models.Model):    doctor = models.ForeignKey(Doctor,on_delete=models.CASCADE)    patient = models.ForeignKey(PatientProfile,on_delete=models.CASCADE)    ward = models.ForeignKey(Wards,on_delete=models.CASCADE)    created_time = models.DateTimeField(auto_now_add=True)    def __str__(self):        return f'{self.patient} - {self.ward} - {self.created_time}'class Chat(models.Model):    person = models.ManyToManyField(UserProfile)    created_date = models.DateField(auto_now_add=True)class Message(models.Model):    chat = models.ForeignKey(Chat, on_delete=models.CASCADE)    author = models.ForeignKey(UserProfile, on_delete=models.CASCADE)    text = models.TextField(null=True, blank=True)    image = models.ImageField(upload_to='images_message', null=True, blank=True)    video = models.FileField(upload_to='videos_message', null=True, blank=True)    created_date = models.DateTimeField(auto_now_add=True)